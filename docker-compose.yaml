version: "3.1"

services:

  project-server:
    build:
      context: ./server/project-service/
      dockerfile: Dockerfile
    restart: always
    container_name: "project-server"
    hostname: "project-server"
    ports:
      # <port_on_local>:<port_in_machine>
      - 8080:8080
    #Will be accessible through os.Getenv("PORT")
    environment:
      - PORT=8080
      # NoSQL: environment variable holding connection URI for Mongo database
      # protocol://username:password@hostname:port
      - MONGO_DB_URI=mongodb://root:pass@mongo-project:27017
      # - MONGO_DB_URI=mongodb://mongo:27017
    # NoSQL: Our service will try to connect to Mongo before it is up
    # in order to avoid that problem, we specify that it depends on mongo service
    # which defines the order of starting the containers
    # Additionaly we specify that mongo service needs to pass a healthcheck
    depends_on:
      mongo-project:
        condition: service_healthy

  # NoSQL: MongoDB
  mongo-project:
    image: mongo
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: pass
      MONGO_INITDB_DATABASE: mongoDemo
    # Docker healtcheck - checks if database is "alive"
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
      - mongo_project_store:/data/db

  # NoSQL: MognoExpress
  mongo-express-project:
    image: mongo-express
    restart: always
    environment:
      # hostname of mongo databse
      - ME_CONFIG_MONGODB_SERVER=mongo
      - ME_CONFIG_MONGODB_ADMINUSERNAME=root
      - ME_CONFIG_MONGODB_ADMINPASSWORD=pass
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=admin
    depends_on:
      - mongo-project
    ports:
      - "8081:8081"
    volumes:
      - mong_project_express_data:/data/db


  user-server:
    build:
      context: ./server/user-service/
      dockerfile: Dockerfile
    restart: always
    container_name: "user-server"
    hostname: "user-server"
    ports:
      - 8082:8080
    environment:
      - PORT=8080
      - MONGO_DB_URI=mongodb://root:pass@mongo-user:27017

    depends_on:
      mongo-user:
        condition: service_healthy

  mongo-user:
    image: mongo
    restart: always
    ports:
      - "27018:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: pass
      MONGO_INITDB_DATABASE: mongoDemo
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
      - mongo_user_store:/data/db

  mongo-express-user:
    image: mongo-express
    restart: always
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongo
      - ME_CONFIG_MONGODB_ADMINUSERNAME=root
      - ME_CONFIG_MONGODB_ADMINPASSWORD=pass
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=admin
    depends_on:
      - mongo-user
    ports:
      - "8083:8081"
    volumes:
      - mong_user_express_data:/data/db


volumes:
  mongo_project_store:
  mongo_user_store:
  mong_user_express_data:
  mong_project_express_data:

