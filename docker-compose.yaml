services:

  project-server:
    build:
      context: ./server/project-service/
      dockerfile: Dockerfile
    restart: always
    container_name: ${PROJECT_SERVICE_HOST}
    hostname: ${PROJECT_SERVICE_HOST}
    ports:
      - ${PROJECT_SERVER_PORT}
    environment:
      - PORT=${PORT}
      - MONGO_DB_URI=${MONGO_DB_URI_PROJECT}
      - NATS_URL=${NATS_URL}
      - JAEGER_ADDRESS=${JAEGER_ADDRESS}
      - USER_SERVICE_HOST=${USER_SERVICE_HOST}
      - CAPTCHA=${CAPTCHA}
      - USER_SERVICE_PORT=${PORT}
      - TASK_SERVICE_HOST=${TASK_SERVICE_HOST}
      - TASK_SERVICE_PORT=${PORT}
      - LINK_TO_USER_SERVICE=${LINK_TO_USER_SERVICE}
      - LINK_TO_TASK_SERVICE=${LINK_TO_TASK_SERVICE}
      - LINK_TO_ANALYTIC_SERVICE=${LINK_TO_ANALYTIC_SERVICE}
    volumes:
      - ./server/project-service/app.log:/app.log
      - ./server/project-service/cert.crt:/app/cert.crt
      - ./server/project-service/privat.key:/app/privat.key
    depends_on:
      mongo-project:
        condition: service_healthy
      nats:
        condition: service_started
    networks:
      - network

  # NoSQL: MongoDB
  mongo-project:
    image: mongo
    restart: always
    ports:
      - ${MONGO_PROJECT_PORT}
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE_USER}
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
      - mongo_project_store:/data/db
    networks:
      - network

  angular-app:
    build:
      context: ./client/ui-trello
      dockerfile: Dockerfile
    container_name: angular-app
    ports:
      - ${ANGULAR_APP_PORT}
    volumes:
      - ./client/ui-trello:/app
      - /app/node_modules
      - ./api-gateway:/app/api-gateway
    depends_on:
      - project-server
      - user-server
      - task-server
      - notification-server
    environment:
      - CHOKIDAR_USEPOLLING=true
    mem_limit: 2g
    networks:
      - network

  mongo-express-project:
    image: mongo-express
    restart: always
    environment:
      - ME_CONFIG_MONGODB_SERVER=${ME_CONFIG_MONGODB_SERVER_PROJECT}
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - ME_CONFIG_BASICAUTH_USERNAME=${ME_CONFIG_BASICAUTH_USERNAME}
      - ME_CONFIG_BASICAUTH_PASSWORD=${ME_CONFIG_BASICAUTH_PASSWORD}
      - ME_CONFIG_MONGODB_URL=${MONGO_DB_URI_PROJECT}
    depends_on:
      - mongo-project
    ports:
      - ${MONGO_EXPRESS_PROJECT_PORTS}
    volumes:
      - mong_project_express_data:/data/db
    networks:
      - network



  task-server:
    build:
      context: ./server/task-service/
      dockerfile: Dockerfile
    restart: always
    container_name: ${TASK_SERVICE_HOST}
    hostname: ${TASK_SERVICE_HOST}
    ports:
      - ${TASK_SERVER_PORTS}
    environment:
      - NATS_URL=${NATS_URL}
      - JAEGER_ADDRESS=${JAEGER_ADDRESS}
      - PORT=${PORT}
      - MONGO_DB_URI=${MONGO_DB_URI_TASK}
      - USER_SERVICE_HOST=${USER_SERVICE_HOST}
      - USER_SERVICE_PORT=${PORT}
      - HDFS_ADDRESS=hdfs://namenode:9000
      - LINK_TO_PROJECT_SERVICE=${LINK_TO_PROJECT_SERVICE}
      - LINK_TO_TASK_SERVICE=${LINK_TO_TASK_SERVICE}
      - LINK_TO_USER_SERVICE=${LINK_TO_USER_SERVICE}
    env_file: ".env"
    volumes:
      - ./server/task-service/app.log:/app.log
      - ./server/task-service/cert.crt:/app/cert.crt
      - ./server/task-service/privat.key:/app/privat.key
    depends_on:
      mongo-task:
        condition: service_healthy
      nats:
        condition: service_started
      namenode:
        condition: service_started
      datanode:
        condition: service_started
    networks:
      - network


  mongo-task:
    image: mongo
    restart: always
    ports:
      - ${MONGO_TASK_PORT}
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE_TASK}
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
      - mongo_task_store:/data/db
    networks:
      - network


  mongo-express-task:
    image: mongo-express
    restart: always
    environment:
      - ME_CONFIG_MONGODB_SERVER=${ME_CONFIG_MONGODB_SERVER_TASK}
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${ME_CONFIG_MONGODB_ADMINUSERNAME}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${ME_CONFIG_MONGODB_ADMINPASSWORD}
      - ME_CONFIG_BASICAUTH_USERNAME=${ME_CONFIG_BASICAUTH_USERNAME}
      - ME_CONFIG_BASICAUTH_PASSWORD=${ME_CONFIG_BASICAUTH_PASSWORD}
      - ME_CONFIG_MONGODB_URL=${ME_CONFIG_MONGODB_URL}
    depends_on:
      - mongo-task
    ports:
      - ${MONGO_EXPRESS_TASK_PORT}
    volumes:
      - mongo_task_express_data:/data/db
    networks:
      - network



  user-server:
    build:
      context: ./server/user-service/
      dockerfile: Dockerfile
    restart: always
    container_name: ${USER_SERVICE_HOST}
    hostname: ${USER_SERVICE_HOST}
    env_file:
      - .env
    ports:
      - ${USER_SERVER_PORTS}
    environment:
      - PORT=${PORT}
      - MONGO_DB_URI=${MONGO_DB_URI_USER}
      - SMTP_EMAIL=${SMTP_EMAIL}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - REDIS_PORT=${REDIS_PORT}
      - CAPTCHA=${CAPTCHA}
      - REDIS_HOST=${REDIS_HOST}
      - JAEGER_ADDRESS=${JAEGER_ADDRESS}
      - LINK_TO_PROJECT_SERVICE=${LINK_TO_PROJECT_SERVICE}
      - LINK_TO_TASK_SERVICE=${LINK_TO_TASK_SERVICE}
      - HTTPS_LINK_TO_USER=${HTTPS_LINK_TO_USER}
    depends_on:
      mongo-user:
        condition: service_healthy
    volumes:
      - ./server/user-service/10k-worst-passwords.txt:/app/10k-worst-passwords.txt
      - ./server/user-service/cert.crt:/app/cert.crt
      - ./server/user-service/privat.key:/app/privat.key
      - ./server/user-service/app.log:/app.log
    networks:
      - network


  mongo-user:
    image: mongo
    restart: always
    ports:
      - ${MONGO_USER_PORT}
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE_USER}
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
      - mongo_user_store:/data/db
    networks:
      - network

  mongo-express-user:
    image: mongo-express
    restart: always
    environment:
      - ME_CONFIG_MONGODB_SERVER=${ME_CONFIG_MONGODB_SERVER_USER}
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${ME_CONFIG_MONGODB_ADMINUSERNAME}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${ME_CONFIG_MONGODB_ADMINPASSWORD}
      - ME_CONFIG_BASICAUTH_USERNAME=${ME_CONFIG_BASICAUTH_USERNAME}
      - ME_CONFIG_BASICAUTH_PASSWORD=${ME_CONFIG_BASICAUTH_PASSWORD}
      - ME_CONFIG_MONGODB_URL=${MONGO_DB_URI_USER}
    depends_on:
      - mongo-user
    ports:
      - ${MONGO_EXPRESS_USER_PORTS}
    volumes:
      - mong_user_express_data:/data/db
    networks:
      - network

  api_gateway:
    build:
      context: ./api-gateway/
      dockerfile: Dockerfile
    container_name: api-gateway
    restart: on-failure
    ports:
      - ${API_GATEWAY_PORTS}
    depends_on:
      - user-server
      - project-server
      - angular-app
      - task-server
      - notification-server
      - workflow-server
      - analytic-service
    entrypoint: [ "/bin/bash", "-c", "while ! curl -s user-server:8080; do sleep 1; done; nginx -g 'daemon off;'" ]
    networks:
      - network

  redis:
    image: redis:alpine
    restart: always
    ports:
      - ${REDIS_PORTS}
    volumes:
      - redis_data:/data
    networks:
      - network

  notification-server:
    build:
      context: ./server/notification-service/
      dockerfile: Dockerfile
    restart: always
    container_name: ${NOTIFICATION_SERVICE_HOST}
    hostname: ${NOTIFICATION_SERVICE_HOST}
    ports:
      - ${NOTIFICATION_SERVER_PORT}
    environment:
      - NATS_URL=${NATS_URL}
      - PORT=${PORT}
      - CASSANDRA_HOST=${CASSANDRA_HOST}
      - CASSANDRA_PORT=${CASSANDRA_PORT}
      - CASSANDRA_KEYSPACE=${CASSANDRA_KEYSPACE}
      - JAEGER_ADDRESS=${JAEGER_ADDRESS}
      - LINK_TO_USER_SERVICE=${LINK_TO_USER_SERVICE}
      - LINK_TO_TASK_SERVICE=${LINK_TO_TASK_SERVICE}
      - LINK_TO_PROJECT_SERVICE=${LINK_TO_PROJECT_SERVICE}
    depends_on:
      cassandra:
        condition: service_healthy
      nats:
        condition: service_started
    volumes:
      - ./server/notification-service/app.log:/app.log
      - ./server/notification-service/cert.crt:/app/cert.crt
      - ./server/notification-service/privat.key:/app/privat.key
    networks:
      - network

  cassandra:
    image: cassandra:4.0
    restart: always
    container_name: ${CASSANDRA_HOST}
    hostname: ${CASSANDRA_HOST}
    ports:
      - ${CASSANDRA_PORTS}
    environment:
      - CASSANDRA_CLUSTER_NAME=${CASSANDRA_CLUSTER_NAME}
      - CASSANDRA_DC=${CASSANDRA_DC}
      - CASSANDRA_RACK=${CASSANDRA_RACK}
      - CASSANDRA_LISTENER_RPC_ADDRESS=${CASSANDRA_LISTENER_RPC_ADDRESS}
    healthcheck:
      test: ["CMD", "cqlsh", "--username", "cassandra", "--password", "cassandra", "--execute", "describe keyspaces"]
      interval: 15s
      retries: 5
      timeout: 15s
    volumes:
      - cassandra_data:/var/lib/cassandra
    networks:
      - network

  nats:
    image: 'nats:latest'
    environment:
      - NATS_URL=${NATS_URL}
    expose:
      - ${NATS_PORT}
    ports:
      - ${NATS_PORTS}
    networks:
      - network

  tracing:
    image: jaegertracing/all-in-one:latest
    container_name: ${JAEGER_HOST}
    ports:
      - "${UDP_PORT}:${UDP_PORT}/udp"
      - "${JAEGER_UI_PORT}:${JAEGER_UI_PORT}"
    environment:
      - COLLECTOR_ZIPKIN_HTTP_PORT=${COLLECTOR_ZIPKIN_HTTP_PORT}
      - JAEGER_ADDRESS=${JAEGER_ADDRESS}
    networks:
      - network

  collector:
    image: otel/opentelemetry-collector:0.69.0
    command: [ "--config=/etc/otel-collector-config.yaml" ]
    volumes:
      - ./api-gateway/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    networks:
      - network

  workflow-server:
    build:
      context: ./server/workflow-service/
      dockerfile: Dockerfile
    restart: always
    container_name: "workflow-service"
    hostname: "workflow-service"
    ports:
      - ${WORKFLOW_SERVICE_PORT}
    environment:
      - PORT=${PORT}
      - NATS_URL=${NATS_URL}
      - NEO4J_DB=${NEO4J_DB}
      - NEO4J_USERNAME=${NEO4J_USERNAME}
      - NEO4J_PASS=${NEO4J_PASS}
      - LINK_TO_USER_SERVICE=${LINK_TO_USER_SERVICE}
      - JAEGER_ADDRESS=${JAEGER_ADDRESS}
    depends_on:
      neo4j:
        condition: service_healthy
      nats:
        condition: service_started
    volumes:
      - ./server/workflow-service/cert.crt:/app/cert.crt
      - ./server/workflow-service/privat.key:/app/privat.key
      - ./server/workflow-service/app.log:/app.log
    networks:
      - network

  neo4j:
    image: neo4j
    restart: always
    ports:
      - "7687:7687"
      - "7474:7474"
      - "7473:7473"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "echo RETURN 1 | cypher-shell -a bolt://neo4j:7687 -u neo4j -p strongerpassword || exit 1",
        ]
      interval: 5s
      timeout: 5s
      retries: 10
    environment:
      - NEO4J_AUTH=neo4j/strongerpassword
    volumes:
      - neo4j_data:/data
    networks:
      - network


  analytic-service:
    hostname: "analytic-server"
    build:
      context: server/analytic-service/
      dockerfile: Dockerfile
    container_name: ${ANALYTICS_SERVICE_HOST}
    restart: always
    ports:
      - ${ANALYTICS_SERVER_PORT}
    env_file:
      - .env
    depends_on:
      - eventstore-db
    environment:
      - EVENTSTORE_ADDRESS=eventstore-db:2113
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
    volumes:
      - ./server/analytic-service/cert.crt:/usr/local/share/ca-certificates/cert.crt
      - ./server/analytic-service/privat.key:/app/privat.key
    networks:
      - network


  eventstore-db:
    image: eventstore/eventstore:21.10.8-buster-slim
    container_name: ${ESDB_HOST}
    hostname: ${ESDB_HOST}
    restart: always
    ports:
      - ${EVENTSTORE_HTTP_PORT}:2113
      - ${EVENTSTORE_TCP_PORT}:1113
    environment:
      EVENTSTORE_CLUSTER_SIZE: 1
      EVENTSTORE_RUN_PROJECTIONS: All
      EVENTSTORE_EXT_TCP_PORT: ${ESDB_UI_PORT}
      EVENTSTORE_HTTP_PORT: ${ESDB_PORT}
      EVENTSTORE_START_STANDARD_PROJECTIONS: true
      EVENTSTORE_CERTIFICATE_FILE: "/app/cert.crt" # Optional, only if using TLS
      EVENTSTORE_CERTIFICATE_PRIVATE_KEY_FILE: "/app/privat.key" # Optional, only if using TLS
      EVENTSTORE_INSECURE: "true" # Allow insecure connection (no TLS)
      EVENTSTORE_ENABLE_EXTERNAL_TCP: true
      EVENTSTORE_ENABLE_ATOM_PUB_OVER_HTTP: true
    volumes:
      - eventstore_data:/var/lib/eventstore
      - ./server/analytic-service/cert.crt:/app/cert.crt
      - ./server/analytic-service/privat.key:/app/privat.key
    networks:
      - network



  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: namenode
    ports:
      - "9870:9870" # Web UI port
      - "9000:9000" # RPC port
    environment:
      - CLUSTER_NAME=test
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
    networks:
      - network
    volumes:
      - namenode_data:/hadoop/dfs/name

  datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode
    depends_on:
      - namenode
    environment:
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
    networks:
      - network
    volumes:
      - datanode_data:/hadoop/dfs/data



volumes:
  mongo_project_store:
  mongo_user_store:
  mongo_task_store:
  mong_user_express_data:
  mong_project_express_data:
  redis_data:
  cassandra_data:
  mongo_task_express_data:
  neo4j_data:
  eventstore_data:
  namenode_data:
  datanode_data:


networks:
  network:
    driver: bridge
